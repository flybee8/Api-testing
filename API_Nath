'''Created on Feb 20, 2017
@author: diptanun'''#!/ms/dist/python/PROJ/core/2.7.9-0-64/bin/pythonimport platformimport ms.versionms.version.addpkg("requests", "2.7.0")ms.version.addpkg("requests-kerberos", "0.5-ms2")ms.version.addpkg("kerberos", "1.1.5")ms.version.addpkg("ms.modulecmd", "1.0.4")ms.version.addpkg('python', 'ng-trunk', meta='ets')ms.version.addpkg("xmltodict", "0.9.0")from ets.testplan import test_planfrom ets.testcases.multitest import MultiTestfrom ets.testcases.multitest.util import *from termcolor import coloredimport requestsimport kerberosimport jsonfrom requests_kerberos import HTTPKerberosAuthfrom datetime import datetimeimport osimport globimport reimport jsonimport ConfigParserimport sysimport timeimport astimport loggingreload(sys)sys.setdefaultencoding('utf-8')from ets.testcases.multitest.suite import testsuite, testcasefrom ets.couch import testdbimport smtplibfrom email.mime.text import MIMETextfrom email.mime.multipart import MIMEMultipartfrom email.MIMEBase import MIMEBasefrom email import Encodersimport urllibimport urllib2import httplibimport urlparseimport argparseimport timeimport xmltodict, jsonfrom xml.etree import ElementTreelogging.basicConfig(level=logging.DEBUG,                    format='%(asctime)s%(levelname)-8s%(message)s',                    datefmt='%a,%d %b %Y %H:%M:%S',                    filename='results.log',                    filemode='w')
config = ConfigParser.ConfigParser()
domain,endpoint,method,urlparams,headers,requestbody,grn=None,None,None,None,None,None,Nonestatus_code=0global_status_codes={ '203' : 'Non-Authoritative Information','206' : 'Partial Content','300' : 'Multiple Choices','400' : 'Bad Request','401' : 'Unauthrised','403' : 'Forbidden',                      '404' : 'Site Not Found','504' : 'Server Error','500' : 'Server Error'}

def get_domain_endpoint_method(section):
    try:        domain=config.get(section,'domain')        endpoint=config.get(section,'endpoint')        method=config.get(section,'method')        urlparams=config.get(section,'urlparams')        headers=config.get(section,'headers')        requestbody=config.get(section,'requestbody')        grn=config.get(section,'grn')    except:        pass    return (domain,endpoint,method,urlparams,headers,requestbody,grn)
def get_cookie(grn):    user_agent="Python-requests/%s;%s" % (platform.python_version(),grn)    g_cookies= requests.get("http://krb2sm-v2-prod.ms.com/login", headers={"User-Agent":user_agent},auth=HTTPKerberosAuth())    g_cookies=g_cookies.cookies    return g_cookiesdef GET(url=None,urlparams=None,headers =None,grn=None,result=None):    start = time.time()    if urlparams:        try:            g_cookies=get_cookie(grn)            r=requests.get(url,params=ast.literal_eval(urlparams), verify=False,timeout=20.001,headers = ast.literal_eval(headers),cookies=g_cookies)            if r.status_code!=200:                r=requests.get(url,params=ast.literal_eval(urlparams), verify=False,timeout=20.001,headers = ast.literal_eval(headers),auth=HTTPKerberosAuth())        except Exception as e :            print colored(str(e),"red")            result.log("API response not received")    else:        try:            g_cookies=get_cookie(grn)            r=requests.get(url,params=urlparams, verify=False,timeout=20.001,headers = ast.literal_eval(headers),cookies=g_cookies)            if r.status_code!=200:                r=requests.get(url,params=urlparams, verify=False,timeout=20.001,headers = ast.literal_eval(headers),auth=HTTPKerberosAuth())        except Exception as e:            print colored("API response not received without url params",'red')            result.log("API response not received")
    responsetime = time.time() - start    #r.connection.close()    try:        if r.status_code!=200:            return None,r.status_code,None,None,responsetime        else:            try:                return r.url,r.status_code,r.json(),r.text,responsetime            except Exception as e:                print str(e)                print colored("XML response Received",'green')                #o = xmltodict.parse(r.text)                #jsonResponse=json.dumps(o)                return r.url,r.status_code,r.text,"json",responsetime                print colored("Data sent",'green')    except:        print colored("Connection reset by peer",'red')        return url,"104","Connection reset by peer","Service Unavailable",responsetime
def POST(url=None,params=None,headers=None,data=None,grn=None,result=None):    start = time.time()    if urlparams:        try:            g_cookies=get_cookie(grn)            r=requests.post(url,params=ast.literal_eval(params),headers =json.loads(headers) ,cookies=g_cookies,data=data)        except:            print colored("Element not found",'red')            result.log("API response not recived")    else:        try:            g_cookies=get_cookie(grn)            r=requests.post(url,params=params,headers =json.loads(headers) ,cookies=g_cookies,data=data)        except:            print colored("Element not found",'red')            result.log("API response not recived")    responsetime = time.time() - start    r.connection.close()    return r.url,r.status_code,r.json(),r.text,responsetime
@testsuiteclass API_validations(object):    def __init__(self,item):        self.item=item
    @testcase    def API_validations(self, env,result):        domain,endpoint,method,urlparams,headers,requestbody,grn=get_domain_endpoint_method(self.item)        if endpoint is not None:            url = (domain+endpoint)        else:            url=domain        if(method=='GET'):            request_url,status_code,response_body,text,responsetime=GET(url,urlparams,headers,grn,result)        elif(method=='POST'):            request_url,status_code,response_body,text,responsetime=POST(url,urlparams,headers,requestbody,grn,result)            pass        else:            pass
        logging.info('\t'+'\n'+'Request_url :'+str(request_url)                     +'\n'+'Status Code :'+str(status_code)                     +'\n'+'Response body:'+str(response_body)+'\n'+'Response Time:'+str(responsetime)+'\t')
        result.log("Request_url :"+str(request_url))        result.log("Response Code :"+str(status_code))        result.log("Response Body :"+str(response_body))        result.log("Response Time :"+str(responsetime))        result.equal(200, description="Actual Response Code") (status_code, name="Expected Response Code")


@test_plan(name='API Validation', description='API validation',database=testdb('testplan'))def main(plan,parser):    parser.add_argument('--filepath',help='enter Config file location')    args=parser.parse_args()    if args.filepath is not None:        config.read(args.filepath+'/Config.ini')    else:        config.read('Config.ini')
    print colored("************API under Test************* " +'\n','green')    pattern='.*(?i)YES'    for item in config.sections():        if not item=='email':            try:                runmode=config.get(item,'runmode')            except:                pass            matchObj=re.match(pattern,runmode)            if matchObj:                plan.add( MultiTest( name='API Validation'+item,                                     description='API Validation_TestCase',                                     suites=API_validations(item),                                     environment=[] ))        else:            pass
if __name__=='__main__':    main()msg = MIMEMultipart()try:    msg['From']=config.get('email','From')    msg['To']=config.get('email','To')    msg['Subject']=config.get('email','Subject')    try:        msg['Bcc']=config.get('email','Bcc')    except:        pass    try:        msg['CC']=config.get('email','CC')    except:        passexcept:   passs = smtplib.SMTP('10.181.47.31')
files = [f for f in os.listdir('.') if os.path.isfile(f)]for f in files:    if f=='report.html':        part = MIMEBase('application', "octet-stream")        part.set_payload( open(f,"rb").read() )        Encoders.encode_base64(part)        part.add_header('Content-Disposition', 'attachment; filename="{0}"'.format(os.path.basename(f)))        msg.attach(part)if  not msg['From'] or msg['To'] in msg.keys():    passelse:    print colored("****************Sending Email*************** ",'green')    s.sendmail(msg['From'],msg['To'],msg.as_string())    s.quit()
